{"version":3,"file":"queues-ahqpviki.js","sources":["../../src/data/pages/queues.ts","../../src/stores/queues.ts"],"sourcesContent":["import { NewQueue, Queue } from '../../pages/queues/types'\nimport api from '../../services/api'\n\nexport type Pagination = {\n  page: number\n  perPage: number\n  total: number\n}\n\nexport type Sorting = {\n  sortBy: keyof Queue | undefined\n  sortingOrder: 'asc' | 'desc' | null\n}\n\nexport type Filters = {\n  isActive: boolean\n  search: string\n}\n\nexport const getQueues = async (filters: Partial<Filters & Pagination & Sorting>) => {\n  const { isActive, search } = filters\n  let filteredQueues: Queue[] = await api.request(api.allQueues())\n\n  if (isActive) {\n    filteredQueues = filteredQueues.filter((queue) => queue.step !== 3)\n  } else {\n    filteredQueues = filteredQueues.filter((queue) => queue.step == 3)\n  }\n\n  if (search) {\n    filteredQueues = filteredQueues.filter(\n      (queue) =>\n        queue.profile?.fullname.toLowerCase().includes(search.toLowerCase()) ||\n        queue.queuename.toLowerCase().includes(search.toLowerCase()) ||\n        queue.email.toLowerCase().includes(search.toLowerCase()),\n    )\n  }\n\n  const { page = 1, perPage = 10 } = filters || {}\n  return {\n    data: filteredQueues,\n    pagination: {\n      page,\n      perPage,\n      total: filteredQueues.length,\n    },\n  }\n}\n\nexport const getNumbers = async (date: string, service_id: number) => {\n  return await api.request(api.numbers({ date, service_id }))\n}\n\nexport const makeCall = async (id: number) => {\n  return await api.request(api.call(id))\n}\n\nexport const getWaitlist = async () => {\n  return await api.request(api.waitlist())\n}\n\nexport const addQueue = async (queue: NewQueue) => {\n\n  const result = await api.request(api.allQueues(), { method: 'POST', body: JSON.stringify(queue) })\n\n  if (!result.error) {\n    return result\n  }\n\n  throw new Error(result.error)\n}\n\nexport const updateQueue = async (queue: NewQueue) => {\n\n   const cleanedQueue: any = { ...queue }\n\n  // Replace nested objects with just their IDs\n  if (typeof cleanedQueue.client === 'object' && cleanedQueue.client !== null) {\n    cleanedQueue.client_id = cleanedQueue.client.id\n    delete cleanedQueue.client\n  }\n\n  if (typeof cleanedQueue.service === 'object' && cleanedQueue.service !== null) {\n    cleanedQueue.service_id = cleanedQueue.service.id\n    delete cleanedQueue.service\n  }\n\n\n  const result = await api.request(api.queue(queue.id), { method: 'PUT', body: JSON.stringify(cleanedQueue) })\n\n  if (!result.error) {\n    return result\n  }\n\n  throw new Error(result.error)\n}\n\nexport const removeQueue = async (queue: Queue) => {\n  return api.request(api.queue(queue.id), { method: 'DELETE' })\n}\n\nexport const uploadAvatar = async (body: FormData) => {\n  return fetch(api.avatars(), { method: 'POST', body, redirect: 'follow' }).then((r) => r.json())\n}\n","import { defineStore } from 'pinia'\nimport {\n  addQueue,\n  type Filters,\n  getQueues,\n  getNumbers,\n  Pagination,\n  removeQueue,\n  Sorting,\n  updateQueue,\n  getWaitlist,\n  makeCall,\n} from '../data/pages/queues'\nimport { Queue, AvailableNumber, Waitlist, NewQueue } from '../pages/queues/types'\n\nexport const useQueuesStore = defineStore('queues', {\n  state: () => {\n    return {\n      items: [] as Queue[],\n      waitlist: {} as Waitlist,\n      numbers: [] as AvailableNumber[],\n      pagination: { page: 1, perPage: 10, total: 0 },\n    }\n  },\n\n  actions: {\n    async getAll(options: { pagination?: Pagination; sorting?: Sorting; filters?: Partial<Filters> }) {\n      const { data, pagination } = await getQueues({\n        ...options.filters,\n        ...options.sorting,\n        ...options.pagination,\n      })\n      this.items = data\n      this.pagination = pagination\n    },\n    async getAvailableNumbers(date: string, service_id: number) {\n      this.numbers = await getNumbers(date, service_id)\n    },\n    async getWaitlistData() {\n      this.waitlist = await getWaitlist()\n    },\n    async callTicket(id: number) {\n      await makeCall(id)\n    },\n\n    async add(queue: NewQueue) {\n      const newQueue = await addQueue(queue)\n      this.items.unshift(newQueue)\n      return newQueue\n    },\n\n    async update(queue: Queue) {\n      const updatedQueue = await updateQueue(queue)\n      const index = this.items.findIndex(({ id }) => id === queue.id)\n      this.items.splice(index, 1, updatedQueue)\n      return updatedQueue\n    },\n\n    async remove(queue: Queue) {\n      const isRemoved = await removeQueue(queue)\n\n      if (isRemoved) {\n        const index = this.items.findIndex(({ id }) => id === queue.id)\n        this.items.splice(index, 1)\n      }\n    },\n  },\n})\n"],"names":["getQueues","filters","isActive","search","filteredQueues","api","queue","_a","page","perPage","getNumbers","date","service_id","makeCall","id","getWaitlist","addQueue","result","updateQueue","cleanedQueue","removeQueue","useQueuesStore","defineStore","options","data","pagination","newQueue","updatedQueue","index"],"mappings":"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"}